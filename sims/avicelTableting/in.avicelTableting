############################### SIMULATION SETTINGS ###################################################

atom_style sphere 
atom_modify map array 
comm_modify vel yes
units si
newton off
neighbor      0.6e-3 bin
neigh_modify every 10 delay 10000 check yes 
timestep 1.5e-7

######################### SIMULATION BOUNDING BOX, INTEGRATION, AND, GRAVITY ###########################

boundary f f f
read_data spheres.data      # this .data file is generated by generatePacking/generateCylinderPacking.m

######################################### ADD DIE AND ATOM PARAMETERIZATION ##############################################

variable atomRadius              equal 0.4e-3           # update this to match value specified in generatePacking/generateCylinderPacking.m 
variable atomDiameter            equal 2*${atomRadius}
variable atomDensity             equal 1560             # change to match powder of interest
variable dieRadius               equal 4e-3             # radius of die, change to match own geometry
variable dieHeight               equal 1e-2             # height of die, change to match own geometry

########################### PARTICLE MATERIAL PROPERTIES AND FORCE MODEL ###############################

pair_style granular
# The MDR model takes 6 inputs: 
# E, Young's modulus - can typically find reasonable reported values in literature
# nu, Poissons ratio - can typically find reasonable reported values in literature
# Y, Yield stress - not typically reported need to fit this value
# gamma, effective surface energy - I calculate this from the critical stress intensity factor K_Ic, a fracture mechanics property that is typically reported in literature. K_Ic = sqrt(2 gamma E/(1-nu^2))
# psi_b, confinement ratio - this is a free parameter that should be in the range from 0.1-0.6. It controls when the bulk response (i.e. when things stiffen) turns on, the lower it is the more delayed the stiffening.
# CoR, coefficent of restiution, allows normal damping to be specified.

# mdr normal model
variable YoungsModulus equal 7.5e9
variable PoissonsRatio equal 0.3
variable YieldStress equal 1.5e8
variable SurfaceEnergy equal 220            # particle-particle surface energy
variable SurfaceEnergyWall equal 0.0        # wall-particle surface energy.
variable psi_b equal 0.6
variable CoR equal 0.5

# tangential model (linear history), see lammps documentation for explanation of this tangential model.
variable kt equal 2/7*${YoungsModulus}*${atomRadius}
variable kt_wall equal 2/7*${YoungsModulus}*${atomRadius}
variable xgammat equal 0.0
variable mu_s equal 1.0
variable mu_s_wall equal 0.1

# rolling model (sds), see lammps documentation for explanation of this rolling model.
variable mu_roll equal 0.7
variable k_roll equal 2.25*${mu_roll}*${mu_roll}*${YoungsModulus}*${atomRadius}
variable gamma_roll equal 0.0

pair_coeff * * mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergy} ${psi_b} ${CoR} damping none tangential linear_history ${kt} ${xgammat} ${mu_s} rolling sds ${k_roll} ${gamma_roll} ${mu_roll}
#pair_coeff * * mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergy} ${psi_b} ${CoR} tangential linear_history ${kt} ${xgammat} ${mu_s} damping none
#pair_coeff * * mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergy} ${psi_b} ${CoR} tangential linear_nohistory 0.0 0.0 damping none

######################################### ADD DIE AND PUNCH WALLS ################################################

variable disp_upper equal 0.0
variable disp_lower equal 0.0

variable wall_contact_string string "granular mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergyWall} ${psi_b} ${CoR} damping none tangential linear_history ${kt_wall} ${xgammat} ${mu_s_wall} rolling sds ${k_roll} ${gamma_roll} ${mu_roll}"
#variable wall_contact_string string "granular mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergyWall} ${psi_b} ${CoR} tangential linear_history ${kt} ${xgammat} ${mu_s} damping none"
#variable wall_contact_string string "granular mdr ${YoungsModulus} ${PoissonsRatio} ${YieldStress} ${SurfaceEnergyWall} ${psi_b} ${CoR} tangential linear_nohistory 0.0 0.0 damping none"

variable dieHeight2 equal 2*${dieHeight}

# create regions for upper punch, lower punch, and die
region lowerPunch plane 0 0 0 0 0 1 side in units box move NULL NULL v_disp_lower units box
region upperPunch plane 0 0 ${dieHeight} 0 0 -1 side in move NULL NULL v_disp_upper units box
region die cylinder z 0 0 ${dieRadius} 0 ${dieHeight2} side in units box

# define interaction between particles and regions
fix lowerPunch all wall/gran/region ${wall_contact_string} region lowerPunch contacts
fix upperPunch all wall/gran/region ${wall_contact_string} region upperPunch contacts
fix die all wall/gran/region ${wall_contact_string} region die contacts 

# track force on upper punch and its displacement for output
compute avgPunchForce all reduce sum f_upperPunch[4]
variable avgPunchForce equal c_avgPunchForce

fix print1 all print 1 "${disp_upper} ${avgPunchForce}" file upperPunchDispForce.csv screen no 

##################################### INSERT PARTICLES ####################################################

fix 1 all nve/sphere
fix grav all gravity 9.81 vector 0 0 -1

######################################## SCREEN OUTPUT  ####################################################

compute       1 all erotate/sphere
thermo_style  custom dt step atoms ke vol
thermo        100
thermo_modify lost ignore norm no

##################################### SET UP DUMP OUTPUTS  ####################################################

compute ke all ke/atom
variable output_rate equal round(1e-3/dt)

run 0

# compute average stresses in die
compute sigmaxx all property/atom d_sigmaxx
compute sigmayy all property/atom d_sigmayy
compute sigmazz all property/atom d_sigmazz
compute Velas all property/atom d_Velas
compute adhesive_length all property/atom d_adhesive_length

compute sigmaxx_ave all reduce ave c_sigmaxx 
compute sigmayy_ave all reduce ave c_sigmayy 
compute sigmazz_ave all reduce ave c_sigmazz 
compute Velas_sum all reduce sum c_Velas
compute adhesive_length_ave all reduce ave c_adhesive_length 

variable sxx_ave equal c_sigmaxx_ave
variable syy_ave equal c_sigmayy_ave
variable szz_ave equal c_sigmazz_ave
variable Vparticles equal c_Velas_sum
variable adh_length_ave equal c_adhesive_length_ave

# ouput average stresses and dump file, can turn on vtk if desired need to create a post file first
fix log all print 1 "${sxx_ave} ${syy_ave} ${szz_ave} ${Vparticles} ${adh_length_ave}" file avgStresses.csv screen no
dump dumpParticles all custom ${output_rate} avicelTableting.dump id type mass diameter x y z vx vy vz fx fy fz c_ke c_sigmaxx c_sigmayy c_sigmazz
#dump dumpParticlesVTK all vtk ${output_rate} post/particles_*.vtk id x y z fx fy fz vx vy vz c_ke radius c_sigmaxx c_sigmayy c_sigmazz

######################################### RUN SIMULATION ##########################################

# define kinematics of simulation and run it.
variable        upper_punch_stroke equal 0.658*${dieHeight}     # change the prefactor out front to control upper punch stroke.
variable        vel_upper equal 0.25                            # can change the velocity to control compression rate

variable        settling_steps equal round(0.02/dt)
variable 		compression_steps equal 2*round(${upper_punch_stroke}/${vel_upper}/dt)
variable        ejection_steps equal ${compression_steps}
variable        free_float_steps equal round(0.01/dt)
variable        total_steps equal ${settling_steps}+${compression_steps}+${ejection_steps}+${free_float_steps}

print "Total steps = ${total_steps}"

##### SETTLING #####

run		        ${settling_steps}

##### Compression & Release #####

variable        punch_frequency equal PI/2/(dt*${compression_steps}/2)
variable        disp_upper equal -${upper_punch_stroke}*sin(${punch_frequency}*elapsed*dt)
variable        short_release equal round(${compression_steps}*1.0)
run             ${short_release}

##### EJECTION #####

variable        punch_frequency equal PI/2/(dt*${ejection_steps})
variable        disp_lower equal ${dieHeight}*sin(${punch_frequency}*elapsed*dt)
variable 		disp_upper equal 0.9*v_disp_lower
run             ${ejection_steps}

##### FREE FLOAT #####

variable 		disp_lower equal ${dieHeight}
variable 		disp_upper equal ${dieHeight}*0.9
run 			${free_float_steps}	

